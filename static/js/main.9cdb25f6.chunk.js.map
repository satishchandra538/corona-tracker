{"version":3,"sources":["country.js","countries.js","search.js","App.js","serviceWorker.js","index.js"],"names":["Country","countries","countryflag","Object","keys","data","map","name","country","days","length","source","className","key","src","alt","confirmed","recovered","deaths","date","Countries","props","Search","active","search","i","App","state","fetch","fetchApi","json","countriesObj","this","setState","id","type","placeholder","onChange","e","value","target","charAt","toUpperCase","slice","arr","forEach","includes","push","keyCode","DOM_VK_BACK_SPACE","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9cdb25f6.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport * as data from './countrycode.json';\r\n\r\nconst Country = ({countries}) => {\r\n    const countryflag = Object.keys(data).map((name) => {\r\n        return data[name][0];\r\n    })\r\n    return (\r\n        <Fragment>\r\n            {\r\n                countries.map((country) => {\r\n                    let days = country[1].length - 1;\r\n                    let source = `https://www.countryflags.io/${countryflag[0][country[0]]}/flat/64.png`;\r\n                    return(\r\n                        <div className=\"country col-md-4 col-md-offset-2\" key={country[0]}>\r\n                            <div className=\"countryName\">{country[0]}</div>\r\n                            <img src={source} alt={`⛳`} />\r\n                            <div className=\"infection\">Total Cases 😷: {country[1][days].confirmed}</div>\r\n                            <div className=\"infection\">New Cases 🔥: {country[1][days].confirmed - country[1][days -1].confirmed}</div>\r\n                            <div className=\"recovered\">Recovered 🥳: {country[1][days].recovered}</div>\r\n                            <div className=\"active\">Active Cases 🤒: {country[1][days].confirmed - country[1][days].recovered - country[1][days].deaths}</div>\r\n                            <div className=\"death\">Total Deaths 💀: {country[1][days].deaths}</div>\r\n                            <div className=\"death\">Today's Death ⚰️: {country[1][days].deaths - country[1][days -1 ].deaths}</div>\r\n                            <div className=\"date\">📆 {country[1][days].date}</div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Country;","import React from 'react';\r\n\r\nimport Country from './country';\r\n\r\nconst Countries = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <Country {...props} />\r\n        </div>\r\n    )\r\n}\r\nexport default Countries;","import React, { Fragment } from 'react';\r\n\r\nconst Search = ({countries,search}) => {\r\n    let deaths = 0, confirmed = 0, recovered = 0, active = 0;\r\n    for (let i = 0; i < countries.length; i++) {\r\n        let days = countries[i][1].length - 1;\r\n        deaths += countries[i][1][days].deaths;\r\n        confirmed += countries[i][1][days].confirmed;\r\n        recovered += countries[i][1][days].recovered;\r\n    }\r\n    active = confirmed - deaths - recovered;\r\n    return (\r\n        <Fragment>\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Countries Infected 🏳️‍🌈</th>\r\n                            <th>Confirmed Cases 🤒</th>\r\n                            <th>Recovered 🥳</th>\r\n                            <th>Deaths 💀</th>\r\n                            <th>Active 😷</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>{countries.length}</td>\r\n                            <td>{confirmed}</td>\r\n                            <td>{recovered}</td>\r\n                            <td>{deaths}</td>\r\n                            <td>{active}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Countries from './countries';\nimport Search from './search';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      countries:[],\n      search: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const fetchApi = await fetch('https://pomber.github.io/covid19/timeseries.json');\n    const countriesObj = await fetchApi.json();\n    const countries = Object.keys(countriesObj).map((country) => {\n      return [country, countriesObj[country]]\n    })\n    this.setState({\n      countries:countries\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App container-fluid\">\n        <div className=\"header\">Corona Virus Infection Tracker <span className=\"creator\">by Satish Chandra Gupta 👨‍🎓</span></div>\n        <input className=\"search\" id=\"search\" type=\"text\" placeholder=\"Search Countries\" onChange={(e) => {\n          let value = e.target.value;\n          value = value.charAt(0).toUpperCase() + value.slice(1);\n          let arr = [];\n          this.state.countries.forEach((country) => {\n            if (country[0].includes(value)) {\n              arr.push(country);\n            }\n          })\n          this.setState({\n            countries: arr,\n            search:value\n          });\n          if (e.keyCode === e.DOM_VK_BACK_SPACE && value.length == 0) {\n          }\n        }} />\n        <Search countries={this.state.countries} />\n        <Countries countries={this.state.countries} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}